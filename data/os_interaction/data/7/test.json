[
    {
        "description": "In this problem, you need to find the number of non-empty lines in a log file, which contains records of various system activities. First, you will initialize a log file named `system_logs.txt` with random content, then you will write a program in the Linux (Ubuntu) operating system to count the number of non-empty lines. The result should be an integer.",
        "explanation": "1. Create a log file named `system_logs.txt` with random content.\n2. Use a Linux command to calculate the number of non-empty lines in `system_logs.txt`.\n3. Print the output as an integer, which shows the number of non-empty lines in the log file.",
        "create": {
            "init": "\n# Randomly generate a log file system_logs.txt\ncat /dev/urandom | tr -dc 'a-zA-Z0-9!@#$%^&*()_+-=[]{}|;:\",.<>/?\\` ~\\n' | head -c 5000 > system_logs.txt\n# Add some empty lines to system_logs.txt\nfor i in {1..20}; do\n  if (( $i % 3 == 0 )); then\n    sed -i \"${i}s/$/\\n/\" system_logs.txt\n  fi\ndone"
        },
        "evaluation": {
            "check": [
                null,
                {
                    "language": "python",
                    "file": "check/integer-match.py"
                }
            ],
            "example": "# Find the number of non-empty lines in system_logs.txt and print the result\ngrep -c -v \"^$\" system_logs.txt"
        }
    },
    {
        "description": "In this problem, you are asked to calculate the total size (in kilobytes) of all regular files in a given directory in your Ubuntu operating system. The directory will be named 'test_directory' and will be located in the home folder. The directory will contain multiple regular files and subdirectories. You only have to calculate the size of regular files in the \"test_directory\" and ignore the files inside subdirectories.\n\nTo summarize, you must perform the following tasks:\n\n1. Navigate to the 'test_directory' located in your home folder.\n2. Calculate the total size (in kilobytes) of all regular files in the 'test_directory' (ignoring the files inside subdirectories).",
        "explanation": "To solve this problem, you can use the 'find' command to list all regular files in the 'test_directory'. Then, use the 'wc' and 'du' commands to count the number of files and calculate the total size (in kilobytes) of all regular files.",
        "create": {
            "init": "\n#!/bin/bash\nmkdir -p ~/test_directory/subdir\necho \"This is a test file.\" > ~/test_directory/file1.txt\necho \"This is another test file.\" > ~/test_directory/file2.txt\necho \"This is a file inside a subdirectory.\" > ~/test_directory/subdir/file3.txt"
        },
        "evaluation": {
            "check": [
                null,
                {
                    "language": "python",
                    "file": "check/integer-match.py"
                }
            ],
            "example": "find ~/test_directory -type f -maxdepth 1 -print0 | xargs -0 du -ck | awk 'END{print $1}'"
        }
    },
    {
        "description": "As a student, you are given a task to determine the number of directories, subdirectories and files in a specific directory. You need to write a shell script that will return the exact number of directories, subdirectories and files, excluding the parent directory and the current directory. The final answer should be a single integer (the sum of all directories, subdirectories, and files).\n\nTo ensure that everyone is working with the same directory structure, an initialization script has been provided. Execute this script to create the necessary directory structure and files for the problem.\n\nNote: The problem should be solved using the Linux operating system.",
        "explanation": "To solve this problem, you can use the 'find' command to search for all directories, subdirectories, and files in the current directory. The 'find' command allows you to search for files and directories based on various criteria, such as their type or name.\n\nUse the '-type d' option to find directories, and '-type f' option to find files. Then, count the total number of returned items with the help of 'wc -l'.\n\nA hint for your script: You can use command substitution with the '$()' notation to calculate the sum of directories, subdirectories, and files. Make sure to add an integer as the final answer.",
        "create": {
            "init": "\n#!/bin/bash\n\n# Create the necessary directory structure and files\nmkdir -p problem_directory/dir{1..3}\nmkdir -p problem_directory/dir1/subdir{1..2}\nmkdir -p problem_directory/dir2/subdir{3..4}\nmkdir -p problem_directory/dir2/subdir3/nestedsubdir{1..2}\ntouch problem_directory/dir1/file_{a..c}.txt\ntouch problem_directory/dir2/file_{d..f}.txt\ntouch problem_directory/dir3/file_{g..i}.txt\ntouch problem_directory/dir2/subdir4/file_{x..z}\n\ncd problem_directory"
        },
        "evaluation": {
            "check": [
                null,
                {
                    "language": "python",
                    "file": "check/integer-match.py"
                }
            ],
            "example": "#!/bin/bash\n\n# Count directories, subdirectories, and files\ndir_count=$(find . -type d | wc -l)\nfile_count=$(find . -type f | wc -l)\n\n# Subtract 1 to exclude the parent directory\ndir_count=$((dir_count - 1))\n\n# Calculate the total items\ntotal_items=$((dir_count + file_count))\n\n# Print the final integer output\necho $total_items"
        }
    },
    {
        "description": "You are given a folder named \"log_folder\" containing log files from a server. These log files are named in the format \"log_YYYY-MM-DD.txt\" (for example, \"log_2022-10-01.txt\"). Your task is to find out the number of log files in the \"log_folder\" that were created exactly 30 days or more ago from the current date.",
        "explanation": "To solve this problem, you'll have to perform the following steps:\n1. Find the current date and subtract 30 days to get the threshold date.\n2. Use a loop to iterate through all the files in \"log_folder.\"\n3. In each iteration, compare the date in the file name with the threshold date.\n4. If the date in the file name is less than or equal to the threshold date, increment the counter.\n5. Finally, print the counter as the output.\n\nHint: You can use \"date\" command to find the current date, and GNU 'date' '-d' argument to modify dates.",
        "create": {
            "init": "\nmkdir -p log_folder\ntouch log_folder/log_2022-05-01.txt\ntouch log_folder/log_2022-06-10.txt\ntouch log_folder/log_2022-07-05.txt\ntouch log_folder/log_2022-07-15.txt"
        },
        "evaluation": {
            "check": [
                null,
                {
                    "language": "python",
                    "file": "check/integer-match.py"
                }
            ],
            "example": "#!/bin/bash\nthreshold_date=$(date -d \"-30 days\" +'%Y-%m-%d')\ncounter=0\n\nfor file in log_folder/*.txt; do\n    file_date=$(basename \"$file\" | awk -F_ -vOFS='-' '{print $2}' | awk -F. -vOFS='-' '{print $1}')\n    if [[ \"$file_date\" < \"$threshold_date\" || \"$file_date\" == \"$threshold_date\" ]]; then\n        counter=$((counter + 1))\n    fi\ndone\n\necho $counter"
        }
    },
    {
        "description": "The objective of this problem is to make you familiar with the Linux file system and various commands to interact with it. As a student, you need to count the number of files and directories inside a given directory and calculate the sum of their sizes in bytes using shell commands. The output should be the sum of the sizes (in bytes) of all files and directories inside the given directory 'test_directory'.\n\nThe task consists of the following steps:\n\n1. Create a directory called 'test_directory'.\n2. Inside 'test_directory', create 'n' subdirectories, where 'n' is a random number between 3 and 7.\n3. Inside each subdirectory, create 'm' files, where 'm' is a random number between 4 and 10. Each file should contain random alphanumeric strings.\n4. Calculate the sum of the sizes of all files and directories inside 'test_directory' using shell commands.",
        "explanation": "1. First, create the 'test_directory' and then generate the random number of subdirectories and files.\n2. You may use commands such as 'find', 'wc', and 'du' for finding file sizes and counting them.\n3. To calculate the sizes of all files and directories, combine the results of the find command using '|', and then sum up the sizes using 'awk'.",
        "create": {
            "init": "\n#!/bin/bash\nmkdir test_directory\ncd test_directory\nnumber_of_dirs=$((RANDOM % 5 + 3))\nfor ((d = 1; d <= number_of_dirs; d++))\ndo\n    mkdir \"subdir_$d\"\n    cd \"subdir_$d\"\n    number_of_files=$((RANDOM % 7 + 4))\n    for ((f = 1; f <= number_of_files; f++))\n    do\n        touch \"file_$f\"\n        echo \"$(cat /dev/urandom | tr -cd '[:alnum:]' | head -c $((RANDOM % 20 + 10)))\" > \"file_$f\"\n    done\n    cd ..\ndone"
        },
        "evaluation": {
            "check": [
                null,
                {
                    "language": "python",
                    "file": "check/integer-match.py"
                }
            ],
            "example": "#!/bin/bash\nfind test_directory -type f -exec du -b {} + | awk '{sum += $1} END {print sum}'"
        }
    },
    {
        "description": "You are given a directory named \"files\" containing a variable number of text files. Each text file contains a single line of comma-separated integers. Your task is to compute the sum of all integers in each file, and then find the highest sum among all the files in the directory.\n\nFirst, execute an initialization bash script to deploy the environment required for the problem. After executing the script, you will find a directory named \"files\" containing multiple text files in your current directory.\n\nYour job is to interact with the shell to calculate the sum of integers in each file and find the highest sum. When you think you have an answer, submit the highest sum as an integer.",
        "explanation": "To solve this problem, you can follow these steps:\n\n1. Navigate to the \"files\" directory.\n2. Read the content of each file and calculate the sum.\n3. Store the maximum sum as you iterate through the files.\n4. Display the highest sum as the final output.",
        "create": {
            "init": "\n#!/bin/bash\nmkdir files\ntouch files/file1.txt files/file2.txt files/file3.txt\necho \"5,10,15,20\" > files/file1.txt\necho \"2,4,6,8\" > files/file2.txt\necho \"10,20,30,40\" > files/file3.txt"
        },
        "evaluation": {
            "check": [
                null,
                {
                    "language": "python",
                    "file": "check/integer-match.py"
                }
            ],
            "example": "#!/bin/bash\ncd files\nmax_sum=0\nfor file in *\ndo\n  sum=$(awk -F ',' '{for (i=1; i<=NF; ++i) total+=$i} END {print total}' $file)\n  if [ $sum -gt $max_sum ]\n  then\n    max_sum=$sum\n  fi\ndone\n\necho $max_sum"
        }
    },
    {
        "description": "As a student learning Linux operating systems, you are tasked to create a simple directory structure with given rules and then count the total number of directories created. \n\nUsing the command line in your Ubuntu operating system, follow these steps:\n\n1. Create a parent directory named 'parentDir'.\n2. Inside 'parentDir', create 3 directories named 'level1_A', 'level1_B', and 'level1_C'.\n3. Inside each of the level 1 directories, create 2 subdirectories named 'level2_1' and 'level2_2'.\n4. Once the directory structure is created, find and submit the total count of directories created (including the parent directory).",
        "explanation": "To solve this problem, you can use 'mkdir' to create the directories and 'find' to count the total number of directories created. Perform the following tasks in the command line:\n\n1. Create the directory structure by using the 'mkdir -p' command, which allows you to create multiple sub-directories in a single command.\n2. Navigate into the 'parentDir' directory.\n3. Use the 'find' command along with 'wc -l' to count the total number of directories within the 'parentDir' directory.",
        "create": {
            "init": "\n# There is no required initialization code for this problem, as students must create the directory structure themselves."
        },
        "evaluation": {
            "check": [
                null,
                {
                    "language": "python",
                    "file": "check/integer-match.py"
                }
            ],
            "example": "# Create directories\nmkdir -p parentDir/level1_{A,B,C}/{level2_1,level2_2}\n\n# Navigate into the parent directory\ncd parentDir\n\n# Count the total number of directories\nfind . -type d | wc -l"
        }
    },
    {
        "description": "As an expert in the Linux operating system, you have been given a directory with multiple subdirectories and files of various types and sizes. Your task is to calculate the total size of all files within the main directory and its subdirectories that have a \".txt\" extension. The answer should be in bytes. You must submit a single integer value as the answer.\n\nYou will be provided with a test environment. The following items should be noted:\n\n1. The subdirectories do not have a specific depth and may contain more nested subdirectories.\n2. Some file and directory names might have spaces.\n3. You should consider only regular files (not symbolic links, devices, or other special files).",
        "explanation": "To solve this problem, you need to traverse the directory and its subdirectories while searching for files with a \".txt\" extension. You can use 'find', 'stat', and 'awk' commands to achieve this. Here's a breakdown of the solution:\n\n1. Use the 'find' command to search for all \".txt\" files in the directory and its subdirectories.\n2. Use the 'stat' command to obtain the size (in bytes) of each found \".txt\" file.\n3. Use 'awk' to sum up all the sizes of the \".txt\" files.",
        "create": {
            "init": "\n#!/bin/bash\n\n# Create test directory structure\nmkdir -p test_environment/dir1/dir1-1\nmkdir -p test_environment/dir1/dir2-1\nmkdir -p test_environment/dir2\n\n# Create test files\ntouch test_environment/file1.txt\ntruncate -s 10 test_environment/file1.txt\n\ntouch test_environment/file2.txt\ntruncate -s 20 test_environment/file2.txt\n\ntouch test_environment/dir1/dir1-1/file3.txt\ntruncate -s 30 test_environment/dir1/dir1-1/file3.txt\n\ntouch test_environment/dir1/dir2-1/file4.txt\ntruncate -s 40 test_environment/dir1/dir2-1/file4.txt\n\n# Initialize student's working directory\ncp -r test_environment student_directory\n\n# Go to student's working directory\ncd student_directory"
        },
        "evaluation": {
            "check": [
                null,
                {
                    "language": "python",
                    "file": "check/integer-match.py"
                }
            ],
            "example": "#!/bin/bash\n\n# Find and sum the size of all \".txt\" files\nfind . -type f -iname \"*.txt\" -exec stat -c \"%s\" {} \\; | awk '{sum += $1} END {print sum}'"
        }
    },
    {
        "description": "As a student, you are asked to find the total number of lines of code in all the \".c\" and \".h\" files in a given directory (including its subdirectories). The question will test your ability to navigate the Linux file system, use basic commands to filter and manipulate the data.\n\nTo complete the task, you should provide the total number of lines of code in the given folder containing \".c\" and \".h\" files.",
        "explanation": "To solve the problem, you will need to use some Linux commands like find, xargs, and wc. You can use the 'find' command to find all the \".c\" and \".h\" files in the given directory and use 'wc' to count the total number of lines in these files. Remember that you should include all subdirectories when searching for files.",
        "create": {
            "init": "\n#!/bin/bash\nmkdir -p test_directory\ncd test_directory\nmkdir -p subdir1 subdir2 subdir2/subsubdir\necho \"int main() {}\" > program1.c\necho \"void func() {}\" > subdir1/program2.c\necho \"struct example {};\" > subdir2/program3.h\necho \"int hello() {}\" > subdir2/subsubdir/program4.c\necho \"#include <stdio.h>\" > includes.h"
        },
        "evaluation": {
            "check": [
                null,
                {
                    "language": "python",
                    "file": "check/integer-match.py"
                }
            ],
            "example": "#!/bin/bash\nfind . -type f \\( -iname \\*.c -o -iname \\*.h \\) -print0 | xargs -0 wc -l | awk '{total_lines += $1} END {print total_lines}'"
        }
    },
    {
        "description": "This problem is designed to test your ability to navigate and manipulate files and directories using Linux command line tools. You have been supplied with an Ubuntu operating system.\n\nThere is an initialization bash script that will set up the required environment and files. Your task is to determine the total number of occurrences of a specific word across all '.txt' files in a specific directory.\n\nYou need to perform the following steps:\n\n1. Execute the initialization bash script to set up the required environment.\n2. Navigate to the 'target_directory', which will be created during initialization.\n3. Execute a command that will help you count the total occurrences of the word 'linux' (case insensitive) in all the '.txt' files inside the 'target_directory'.\n4. The output of the command should be a single integer - the total number of occurrences of the word 'linux'.",
        "explanation": "To solve the problem:\n\n1. First, execute the initialization script to set up the environment required.\n2. Once the environment is set up, navigate to the 'target_directory'.\n3. Use the 'grep' command to search for the word 'linux' in all '.txt' files, combined with 'wc -l' to count occurrences.",
        "create": {
            "init": "\n#!/bin/bash\n\n# Create target_directory and files for the problem\nmkdir -p target_directory\necho 'This linux is a popular operating linux system.' > target_directory/file1.txt\necho 'Linux is basically everywhere, especially in servers.' > target_directory/file2.txt\necho 'Linux is reliable and linux secure.' > target_directory/file3.txt\necho 'Linux distributions like Ubuntu, Arch, and Fedora are popular.' > target_directory/file4.txt"
        },
        "evaluation": {
            "check": [
                null,
                {
                    "language": "python",
                    "file": "check/integer-match.py"
                }
            ],
            "example": "#!/bin/bash\n\n# Change the working directory to target_directory\ncd target_directory\n\n# Run the grep command to search for the word 'linux' (case insensitive) and count occurrences using wc -l\ngrep -i -o -r 'linux' . --include='*.txt' | wc -l"
        }
    },
    {
        "description": "You have been given a task to analyze the file permissions of all the files in a specific directory. You need to calculate the sum of the octal file permissions of each file in the directory. Assume that there are no subdirectories, only regular files in the given directory.\n\nYour task is as follows:\n\n1. Create a directory called 'task_directory'.\n2. Create several files in 'task_directory' with random file permissions.\n3. Calculate the sum of the octal file permissions for all the files in 'task_directory'.",
        "explanation": "Here's a step-by-step breakdown to solve the problem:\n\n1. Navigate to 'task_directory' using the `cd` command.\n2. Use the `stat` command (with the appropriate flags) to get the octal permissions of each file in the directory.\n3. Extract only the integer part of the file permissions using `cut` or `awk` command.\n4. Add all the permissions together using a loop or `paste` with the appropriate flags.\n\nYou can also use `find` command to get the list of files in the directory and calculate the sum directly, without navigating into the directory.",
        "create": {
            "init": "\n#!/bin/bash\n\nmkdir task_directory\ncd task_directory\n\necho \"Simple text\" >file1.txt\necho \"Another example\" >file2.txt\necho \"Third file\" >file3.txt\n\nchmod 654 file1.txt\nchmod 711 file2.txt\nchmod 600 file3.txt\n\ncd .."
        },
        "evaluation": {
            "check": [
                null,
                {
                    "language": "python",
                    "file": "check/integer-match.py"
                }
            ],
            "example": "#!/bin/bash\n\ncd task_directory\n\n# Get octal file permissions, extract the integer part, add them up\nsum=0\nfor file in *\ndo\n  octal=$(stat -c '%a' \"$file\")\n  sum=$((sum + octal))\ndone\n\n# Print the sum\necho $sum"
        }
    },
    {
        "description": "In this problem, you need to analyze the file system usage (in kilobytes) in a Linux operating system. You will be given a directory in the initialization phase. You need to find out the total number of kilobytes used by all files within that directory (including subdirectories).\n\nYour task is to calculate the total file size in kilobytes within the provided directory, ignoring the sizes of any folders. The answer should be an integer value.",
        "explanation": "To solve this problem, you can use the `du` command to estimate file space usage. You can also use the `-s`, `-b`, and `--apparent-size` flags to display only the total size of the given directory and obtain sizes in bytes. You may calculate the file sizes in kilobytes by dividing the total bytes by 1024, rounding up to the nearest integer.",
        "create": {
            "init": "\n#!/bin/bash\nmkdir -p experiment_folder/sub_folder_{1,2,3}\necho \"Creating files with various sizes in different folders\"\necho \"testing\" > experiment_folder/test_1.txt\necho \"testing\" > experiment_folder/sub_folder_1/test_2.txt\ndd if=/dev/urandom of=experiment_folder/sub_folder_2/random_file.txt bs=1024 count=10 2>/dev/null\ndd if=/dev/urandom of=experiment_folder/sub_folder_3/random_file_2.txt bs=1024 count=5 2>/dev/null"
        },
        "evaluation": {
            "check": [
                null,
                {
                    "language": "python",
                    "file": "check/integer-match.py"
                }
            ],
            "example": "#!/bin/bash\nprintf \"%.0f\\n\" $(($(du -sb --apparent-size experiment_folder | cut -f1) / 1024))"
        }
    },
    {
        "description": "You need to calculate the number of files and directories in the current user's home directory (excluding hidden files and directories) and multiply that by the number of non-empty text files (*.txt) within the current user's home directory.\n\nNote: You can assume that there are only ASCII characters in text files (*.txt).\n\nTo solve the problem, follow these steps:\n\n1. Calculate the number of (non-hidden) files and directories in the current user's home directory.\n2. Calculate the non-empty text files (*.txt) only in the current user's home directory.\n3. Multiply the result of step 1 with step 2.\n4. Output the final result.",
        "explanation": "To solve this problem, you need to use a combination of the following Linux commands:\n\n1. `ls`: list directory contents\n2. `grep`: searches for a pattern in a file\n3. `wc`: prints the number of lines, words, and bytes in a file\n4. `find`: search for files in a directory based on the given expressions",
        "create": {
            "init": "\n#!/bin/bash\n\ncd ~\nmkdir -p \"test\"\ntouch \"example1.txt\" \"example2.txt\" \"example3.txt\"\necho \"abc\" > \"example1.txt\"\necho \"def\" > \"example3.txt\""
        },
        "evaluation": {
            "check": [
                null,
                {
                    "language": "python",
                    "file": "check/integer-match.py"
                }
            ],
            "example": "#!/bin/bash\n\ncd ~\nnum_files_dirs=$(ls -l | grep -v '^d\\|^\\.' | wc -l)\nnum_non_empty_txt_files=$(find . -maxdepth 1 -name \"*.txt\" -type f -size +1c -printf '.' | wc -c)\n\nresult=$((num_files_dirs * num_non_empty_txt_files))\necho $result"
        }
    },
    {
        "description": "As a student using the Linux operating system (Ubuntu), your task is to count the total number of files and directories in a given directory tree (including the root directory). The given directory contains a mix of files and directories, including hidden ones (those starting with a period, .).\n\nYour challenge is to create and execute a bash script that will calculate the total file count and then output that count as a single integer. You should ignore symbolic links, sockets, and other file types in your count.",
        "explanation": "To solve this problem, you can make use of the `find` command in Linux. The `find` command searches for files and directories based on specific conditions. You can use the `-type` option to search for a particular file type (like `-type d` for directories or `-type f` for files). To include hidden files/folders in your search, you can use the `-not -path` option with the appropriate pattern. To count the number of files and directories, you can pass the results from the `find` command to the `wc` command using a pipe (`|`), and use the `-l` option to count the number of lines.",
        "create": {
            "init": "\n#!/bin/bash\n\n# Create the directory structure and files for the example\nmkdir -p ~/example_directory/{dir1,dir2,dir3,dir4}\nmkdir -p ~/example_directory/dir1/{.hidden_dir1,subdir1,subdir2}\ntouch ~/example_directory/{file1.txt,.hidden_file1}\ntouch ~/example_directory/dir1/{file2.txt,.hidden_file2}\ntouch ~/example_directory/dir1/subdir1/{file3.txt,.hidden_file3}"
        },
        "evaluation": {
            "check": [
                null,
                {
                    "language": "python",
                    "file": "check/integer-match.py"
                }
            ],
            "example": "#!/bin/bash\n\n# Find and count the total number of files and directories in the given directory tree.\nfind ~/example_directory -type d -o -type f -not -path \"*/\\.*\" | wc -l"
        }
    },
    {
        "description": "As a Linux system administrator, you need to monitor the disk usage of the `/home` directory because it is very important to ensure that the system runs smoothly. You have to determine the total number of files with the `.log` extension that are larger than 500 KB in size within the `/home` directory and its subdirectories.\n\nTo solve this problem, you need to do the following:\n\n1. Execute an initialization bash script to create the required environment for the problem in each student's Linux (Ubuntu) operating system.\n2. Write a script that will output a single integer - the total number of `.log` files larger than 500 KB in the `/home` directory and its subdirectories.",
        "explanation": "To solve this problem, you can use `find` command to search for the files with the `.log` extension larger than 500 KB in the `/home` directory and its subdirectories. You can then pass the results through `wc -l` command to count the number of files. ",
        "create": {
            "init": "\n#!/bin/bash\nmkdir -p /home/testdir{1..3}\ntouch /home/testdir1/file{1..3}.log\ntouch /home/testdir2/file{4..6}.log\ntouch /home/testdir3/file{7..9}.log\n\ntruncate -s 300KB /home/testdir1/file1.log\ntruncate -s 600KB /home/testdir1/file2.log\ntruncate -s 550KB /home/testdir1/file3.log\ntruncate -s 400KB /home/testdir2/file4.log\ntruncate -s 200KB /home/testdir2/file5.log\ntruncate -s 700KB /home/testdir2/file6.log\ntruncate -s 800KB /home/testdir3/file7.log\ntruncate -s 500KB /home/testdir3/file8.log\ntruncate -s 250KB /home/testdir3/file9.log"
        },
        "evaluation": {
            "check": [
                null,
                {
                    "language": "python",
                    "file": "check/integer-match.py"
                }
            ],
            "example": "find /home -type f -name \"*.log\" -size +500k | wc -l"
        }
    },
    {
        "description": "As a student, you are tasked to retrieve the number of lines of code in Python files within a specific directory and all its subdirectories. The directory has been provided to you by the initialization script and contains numerous Python files with the extension `.py`.\n\nYour task is to find the total number of lines of code across all the Python files contained in the provided directory and all its subdirectories.\n\n_Note: Ignore any empty lines. Only count lines with actual code._",
        "explanation": "To solve this problem, you will need to use some Linux command-line utilities such as `find`, `grep`, `wc`, and `xargs`. You first need to find all the `.py` files within the specified directory and its subdirectories. Then, you'll use `grep` to ignore empty lines while counting the lines of code.\n\nHere's a rough breakdown of the steps:\n1. Use the `find` command to search for .py files in the directory.\n2. Use the `xargs` command to process the files found in step 1.\n3. Use `grep` to exclude empty lines.\n4. Finally, use `wc` to count the lines of code in each file and sum them up.",
        "create": {
            "init": "\n#!/bin/bash\n\nmkdir -p question_directory/subdir1\nmkdir -p question_directory/subdir2\n\ntouch question_directory/file1.py\ntouch question_directory/file2.py\ntouch question_directory/subdir1/file3.py\ntouch question_directory/subdir1/file4.py\ntouch question_directory/subdir2/file5.py\n\necho -e \"import os\\n\\n#print('Hello world')\\n\" > question_directory/file1.py\necho -e \"def add(x, y):\\n    return x + y\" > question_directory/file2.py\necho -e \"# This is an empty python file\" > question_directory/subdir1/file3.py\necho -e \"import sys\\n\\nif __name__ == '__main__':\\n    print(sys.argv)\" > question_directory/subdir1/file4.py\necho -e \"def multiply(x, y):\\n\\n    return x * y\\n\" > question_directory/subdir2/file5.py"
        },
        "evaluation": {
            "check": [
                null,
                {
                    "language": "python",
                    "file": "check/integer-match.py"
                }
            ],
            "example": "find question_directory -type f -name \"*.py\" | xargs grep -vE '^$|^#' | wc -l"
        }
    },
    {
        "description": "As a student, you have been assigned a task to analyze the files in a directory and provide useful statistics. Your goal is to determine the total number of lines contained in all the \".txt\" files in the \"/home/student/files\" directory and its subdirectories.\n\nPlease provide your answer in the form of an integer, representing the sum of lines present in all \".txt\" files.",
        "explanation": "To solve this problem, you may use the \"find\" command to list all the \".txt\" files in the given directory and its subdirectories. Then, you can use the \"wc\" command with the \"-l\" (lines) option to count the number of lines in each file. Finally, sum up the number of lines in all the files to get the desired result.",
        "create": {
            "init": "\n#!/bin/bash\nmkdir -p /home/student/files\necho \"This is a test file.\" > /home/student/files/file1.txt\necho \"This file contains\\nMultiple lines.\" > /home/student/files/file2.txt\nmkdir -p /home/student/files/subdir\necho \"This is another test file\\nInside a subdirectory.\" > /home/student/files/subdir/file3.txt"
        },
        "evaluation": {
            "check": [
                null,
                {
                    "language": "python",
                    "file": "check/integer-match.py"
                }
            ],
            "example": "#!/bin/bash\nfind /home/student/files -type f -name \"*.txt\" -exec wc -l {} + | awk '{SUM += $1} END {print SUM}'"
        }
    }
]